1.Calculate Power
Send Feedback
Write a program to find x to the power n (i.e. x^n). Take x and n from the user. You need to return the answer.
Do this recursively.
Input format :
Two integers x and n (separated by space)
Output Format :
x^n (i.e. x raise to the power n)
Constraints :
0 <= x <= 30
0 <= n <= 30
Sample Input 1 :
 3 4
Sample Output 1 :
81
Sample Input 2 :
 2 5
Sample Output 2 :
32

public class Solution {

	public static int power(int x, int n) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
		 * Taking input and printing output is handled automatically.
		 */
      	if(n==0){
          return 1;
        }
      	if(n==1){
          return x;
        }
      	int mult=power(x,n-1);
		return x*mult;
	}
}






 2.Number of Digits
Send Feedback
Given the number 'n', find out and return the number of digits present in a number recursively.
Input Format :
Integer n
Output Format :
Count of digits
Constraints :
1 <= n <= 10^6
Sample Input 1 :
 156
Sample Output 1 :
3
Sample Input 2 :
 7
Sample Output 2 :
1



import java.util.Scanner;

public class Solution {
    public static int count(int num) {
        if (num == 0) {

            return 0;
        }
        return 1 + count(num / 10);
    }

    public static void main(String args[])

    {

        
        Scanner sc = new Scanner(System.in);
      int num = sc.nextInt();
       int c = count(num);
        System.out.println(c + " ");
    }
}




3.Print First N Natural Numbers - Code
Send Feedback
Given the number 'n', write a code to print numbers from 1 to n in increasing order recursively.
Input Format :
Integer n
Output Format :
Numbers from 1 to n (separated by space)
Constraints :
1 <= n <= 10000
Sample Input 1 :
 6
Sample Output 1 :
1 2 3 4 5 6
Sample Input 2 :
 4
Sample Output 2 :
1 2 3 4



public class Solution {

	public static void print(int n){
		if(n == 0)
			return;
		
        print(n - 1);
		System.out.print(n+" ");
		
	}

}





4.Sum Of Array
Send Feedback
Given an array of length N, you need to find and return the sum of all elements of the array.
Do this recursively.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Output Format :
Sum
Constraints :
1 <= N <= 10^3
Sample Input 1 :
3
9 8 9
Sample Output 1 :
26
Sample Input 2 :
3
4 2 1
Sample Output 2 :
7    


public class Solution {

	public static int sum(int input[]) {
		return sum(input,0);
		
	}
    private static int sum(int input[],int startIndex){
        if(startIndex==input.length)
            return 0;
        int ans=input[startIndex]+sum(input,startIndex+1);
        return ans;
    }


}



5.Check Number in Array
Send Feedback
Given an array of length N and an integer x, you need to find if x is present in the array or not. Return true or false.
Do this recursively.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
'true' or 'false'
Constraints :
1 <= N <= 10^3
Sample Input 1 :
3
9 8 10
8
Sample Output 1 :
true
Sample Input 2 :
3
9 8 10
2
Sample Output 2 :
false


public class Solution {

    public static boolean checkNumber(int input[], int x) {
        return checkNumber(input,x,0);
    }
    private static boolean checkNumber(int input[],int x,int startIndex){
        if(startIndex==input.length)
            return false;
        if(input[startIndex]==x)
            return true;
        return checkNumber(input,x,startIndex+1);
        }
}






6.First Index Of a Number in an Array - Question
Send Feedback
Given an array of length N and an integer x, you need to find and return the first index of integer x present in the array. Return -1 if it is not present in the array.
First index means, the index of first occurrence of x in the input array.
Do this recursively. Indexing in the array starts from 0.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
first index or -1
Constraints :
1 <= N <= 10^3
Sample Input :
4
9 8 10 8
8
Sample Output :
1

class Solution {

	public static int firstIndex(int input[], int x) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
		if(input.length<=1){
          if(input[0]==x){
            return 0;
          }else{
            return -1;
          }
        }
      	int smallArray[]=new int[input.length-1];
      	for(int i=0;i<input.length-1;i++){
          smallArray[i]=input[i];
        }
      	int val=firstIndex(smallArray,x);
     	if(val==-1){
          if(input[input.length-1]==x){
            return input.length-1;
          }
        }
        return val;  
    }
}



7.Last Index Of a Number in an Array - Question
Send Feedback
Given an array of length N and an integer x, you need to find and return the last index of integer x present in the array. Return -1 if it is not present in the array.
Last index means - if x is present multiple times in the array, return the index at which x comes last in the array.
You should start traversing your array from 0, not from (N - 1).
Do this recursively. Indexing in the array starts from 0.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
last index or -1
Constraints :
1 <= N <= 10^3
Sample Input :
4
9 8 10 8
8
Sample Output :
3


public class Solution {

    public static int lastIndex(int input[], int x) {
       return lastIndex(input,x,input.length-1);
    }
    private static int lastIndex(int input[],int x,int startIndex){
        if(startIndex<0)
            return -1;
        if(input[startIndex]==x)
            return startIndex;
        return lastIndex(input,x,startIndex-1);
        }

}


