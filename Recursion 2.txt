1.Remove X
Send Feedback
Given a string, compute recursively a new string where all 'x' chars have been removed.
Input format :
String S
Output format :
Modified String
Constraints :
1 <= |S| <= 10^3
where |S| represents the length of string S. 
Sample Input 1 :
xaxb
Sample Output 1:
ab
Sample Input 2 :
abc
Sample Output 2:
abc
Sample Input 3 :
xx
Sample Output 3:



public class solution {

    // Return the changed string
    public static String removeX(String input){
        // Write your code here
        if(input.length()==0)
            return input;

        if(input.charAt(0)=='x')
            return removeX(input.substring(1));

        else
            return input.charAt(0)+removeX(input.substring(1));

    }
}





2.Remove Duplicates Recursively
Send Feedback
Given a string S, remove consecutive duplicates from it recursively.
Input Format :
String S
Output Format :
Output string
Constraints :
1 <= |S| <= 10^3
where |S| represents the length of string
Sample Input 1 :
aabccba
Sample Output 1 :
abcba
Sample Input 2 :
xxxyyyzwwzzz
Sample Output 2 :
xyzwz


public class Solution {
    public static String removeConsecutiveDuplicates(String s) {
        if(s.length()<=1)
            return s;
        String smallans=removeConsecutiveDuplicates(s.substring(1));
        if(smallans.charAt(0)==s.charAt(0))
            return smallans;
        else
            return s.charAt(0)+smallans;

    }

}









3.Merge Sort - Problem Statement
Send Feedback
Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 


public class solution 
{
    public static void mergeSort(int[] input)
    {

        if(input.length<=1)
            return;
        int mid=input.length/2;
        int[] part1=new int[mid];
        int[] part2=new int[input.length-mid];
        for(int i=0;i<mid;i++)
        {
            part1[i]=input[i];
        }
        int k=0;
        for(int i=mid;i<input.length;i++){
            part2[k]=input[i];
            k++;
        }
        mergeSort(part1);
        mergeSort(part2);
        merge(input,part1,part2);
    }
    private static void merge(int[] input,int part1[],int part2[]){

        int i=0,j=0,k=0;
        while(i<part1.length && j<part2.length){
            if(part1[i]<part2[j])
            {
                input[k]=part1[i];
                k++;
                i++;
            }
            else {
                input[k]=part2[j];
                k++;
                j++;
            }
        }
        while(i<part1.length)
        {
            input[k]=part1[i];
            k++;
            i++;
        }
        while(j<part2.length){
            input[k]=part2[j];
            k++;
            j++;
        }



    }
}










4.Quick Sort - Problem Statement
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 




public class Solution {
	
	public static void quickSort(int[] input) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
        
        quickSort(input,0,input.length-1);	
	}
    
    public static void quickSort(int[] input, int si, int ei)
    {
        if (si>=ei)
        {
            return;
        }
        int pivotIndex=partition(input,si,ei);
        quickSort(input, si, pivotIndex-1);
        quickSort(input,pivotIndex+1,ei);
    }
    
    public static int partition(int[] a, int si, int ei)
    {
        int pivotElement=a[si];
        int smallerEleCount=0;
        for(int i=si+1;i<=ei;i++)
        {
            if (a[i]<pivotElement)
            {
                smallerEleCount++;
            }
        }
        
        int temp=a[si+smallerEleCount];
        a[si+smallerEleCount]=pivotElement;
        a[si]=temp;
        
        int i=si;
        int j=ei;
        while(i<j)
        {
            if (a[i]<pivotElement)
            {
                i++;
            }
            else if (a[j]>=pivotElement)
            {
                j--;
            }
            else
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
                i++;
                j--;
            }
        }
        
        return si+smallerEleCount;
    }
	
}








5.Tower Of Hanoi - Problem Statement
Send Feedback
Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are :
1) Only one disk can be moved at a time.
2) A disk can be moved only if it is on the top of a rod.
3) No disk can be placed on the top of a smaller disk.
Print the steps required to move n disks from source rod to destination rod.
Source Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'.
Input Format :
Integer n
Output Format :
Steps in different lines (in one line print source and destination rod name separated by space)
Constraints :
0 <= n <= 20
Sample Input 1 :
2
Sample Output 1 :
a b
a c
b c
Sample Input 2 :
3
Sample Output 2 :
a c
a b
c b
a c
b a
b c
a c



public class solution 
{
    public static void towerOfHanoi(int disks, char source, char auxiliary, char destination)
    {
        if(disks==0)
            return;
        else if(disks==1)
        { System.out.println(source+" "+destination);
         return;
        }
       
        towerOfHanoi(disks-1,source,destination,auxiliary);
        System.out.println(source+" "+destination);
        towerOfHanoi(disks-1,auxiliary,source,destination);


    }
}